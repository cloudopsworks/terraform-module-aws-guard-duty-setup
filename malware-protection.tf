##
# (c) 2021-2025
#     Cloud Ops Works LLC - https://cloudops.works/
#     Find us on:
#       GitHub: https://github.com/cloudopsworks
#       WebSite: https://cloudops.works
#     Distributed Under Apache v2.0 License
#

data "aws_iam_policy_document" "malware_protection_policy" {
  count = length(try(var.settings.malware_protection.plans, [])) > 0 ? 1 : 0
  statement {
    sid    = "AllowManagedRuleToSendS3EventsToGuardDuty"
    effect = "Allow"
    actions = [
      "events:PutRule",
      "events:DeleteRule",
      "events:PutTargets",
      "events:RemoveTargets",
    ]
    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"
      values   = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
    resources = [
      "arn:aws:events:${data.aws_region.current.id}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
    ]
  }
  statement {
    sid    = "AllowGuardDutyToMonitorEventBridgeManagedRule"
    effect = "Allow"
    actions = [
      "events:DescribeRule",
      "events:ListTargetsByRule",
    ]
    resources = [
      "arn:aws:events:${data.aws_region.current.id}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*",
    ]
  }
}

data "aws_iam_policy_document" "malware_protection_bucket_policy" {
  for_each = {
    for plan in try(var.settings.malware_protection.plans, []) : plan.bucket_name => plan
  }
  statement {
    sid    = "AllowPostScanTag"
    effect = "Allow"
    actions = [
      "s3:PutObjectTagging",
      "s3:GetObjectTagging",
      "s3:PutObjectVersionTagging",
      "s3:GetObjectVersionTagging",
    ]
    resources = [
      "arn:aws:s3:::${each.value.bucket_name}/*",
    ]
  }
  statement {
    sid    = "AllowEnableS3EventBridgeEvents"
    effect = "Allow"
    actions = [
      "s3:PutBucketNotification",
      "s3:GetBucketNotification",
    ]
    resources = [
      "arn:aws:s3:::${each.value.bucket_name}",
    ]
  }
  statement {
    sid    = "AllowPutValidationObject"
    effect = "Allow"
    actions = [
      "s3:PutObject",
    ]
    resources = [
      "arn:aws:s3:::${each.value.bucket_name}/malware-protection-resource-validation-object",
    ]
  }
  statement {
    sid    = "AllowCheckBucketOwnership"
    effect = "Allow"
    actions = [
      "s3:ListBucket",
    ]
    resources = [
      "arn:aws:s3:::${each.value.bucket_name}",
    ]
  }
  statement {
    actions = [
      "s3:GetObject",
      "s3:GetObjectVersion",
    ]
    effect = "Allow"
    resources = [
      "arn:aws:s3:::${each.value.bucket_name}/*",
    ]
    sid = "AllowMalwareScan"
  }
  dynamic "statement" {
    for_each = try(each.value.bucket_kms_key_id, "") != "" ? [1] : []
    content {
      sid    = "AllowDecryptForMalwareScan"
      effect = "Allow"
      actions = [
        "kms:GenerateDataKey",
        "kms:Decrypt",
      ]
      condition {
        test     = "StringLike"
        variable = "kms:ViaService"
        values = [
          "s3.${try(each.value.bucket_kms_key_region, data.aws_region.current.id)}.amazonaws.com"
        ]
      }
      resources = [
        "arn:aws:kms:${try(each.value.bucket_kms_key_region, data.aws_region.current.id)}:${try(each.value.bucket_kms_key_account_id, data.aws_caller_identity.current.account_id)}:key/${each.value.bucket_kms_key_id}"
      ]
    }
  }
}

data "aws_iam_policy_document" "malware_protection_trust_policy" {
  count = length(try(var.settings.malware_protection.plans, [])) > 0 ? 1 : 0
  statement {
    effect = "Allow"
    principals {
      type = "Service"
      identifiers = [
        "malware-protection-plan.guardduty.amazonaws.com"
      ]
    }
    actions = [
      "sts:AssumeRole"
    ]
  }
}

resource "aws_iam_role" "malware_protection" {
  count              = length(try(var.settings.malware_protection.plans, [])) > 0 ? 1 : 0
  name               = format("malware-prot-%s-role", local.system_name)
  assume_role_policy = data.aws_iam_policy_document.malware_protection_trust_policy[0].json
  tags               = local.all_tags
}

resource "aws_iam_role_policy" "malware_protection" {
  count  = length(try(var.settings.malware_protection.plans, [])) > 0 ? 1 : 0
  role   = aws_iam_role.malware_protection[0].name
  name   = "GuardDutyMalwareProtectionPolicy"
  policy = data.aws_iam_policy_document.malware_protection_policy[0].json
}

resource "aws_iam_role_policy" "malware_protection_bucket" {
  for_each = {
    for plan in try(var.settings.malware_protection.plans, []) : plan.bucket_name => plan
  }
  role   = aws_iam_role.malware_protection[0].name
  name   = format("GuardDutyMalwareProtectionBucketPolicy-%s", each.value.bucket_name)
  policy = data.aws_iam_policy_document.malware_protection_bucket_policy[each.key].json
}

resource "aws_guardduty_malware_protection_plan" "this" {
  for_each = {
    for plan in try(var.settings.malware_protection.plans, []) : plan.bucket_name => plan
  }
  actions {
    tagging {
      status = try(each.value.tagging_enabled, true) ? "ENABLED" : "DISABLED"
    }
  }
  protected_resource {
    s3_bucket {
      bucket_name     = each.value.bucket_name
      object_prefixes = try(each.value.object_prefixes, [])
    }
  }
  role = aws_iam_role.malware_protection[0].name
  tags = local.all_tags
}
